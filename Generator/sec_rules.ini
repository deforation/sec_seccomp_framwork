###################################################################
# Seccomp Toolkit by Remo Schweizer as a part of the master thesis
#                  ____ _ _  ___  _ _ _ 
#                 |_  /| | || . || | | |
#                  / / |   ||   || | | |
#                 /___||_|_||_|_||__/_/ 
#                      
# The rules config file defines what actions are allowed on system calls
# It is possible to define rules for global or specific system calls.
#
# The rule design allows to define systemcalls which should be
# allowed, skipped (return EINVAL), modified or systemcalls
# which should lead to a termination of the application
#
# To be able to define actions based on parameter values
# the rule design also allows to check parameters against
# specific values or change the value of parameters
#
#
# Note, that the tracer needs most likely at least access to the
# following system calls to operate correcly
#  - ptrace, wait4, getpid, socket, connect, 
#    sendto, readlink, kill, exit, exit_group, 
#    write, read, lseek, close, fstat, lstat
#
#
# A normal client application needs at least the following permissions
# so it is able to startup and terminate without any logic:
#  - exit, exit_group, write, read
#
# /////////////////////////////////////////////
#
# The rule file has the following structure:
#
# [General]
# debug:     				True or False
# default_action:			{action}
# default_action_tracer:	{action}
#
# # defines which systemcalls shoud strictly be allowed, forbidden,...
# syscall {action}:			list of systemcalls like (open, write, ...)
# # the same for the tracer
# tracer {action}:			list of systemcalls like (open, write, ...)
#
# [Global]
# # Allows to define rules targeting all system calls which
# # contain all the given field groups
#
# [{syscall_name}]
# # Allows to specify rules for specific system calls
#
# /////////////////////////////////////////////
#
# There exist different ways to define rules.
# The following constructs are supported:
# Keep in mind, that each rule can only apper once, but it is possible
# to specify multiple checks / actions by separating them with a comma
#
# - {action} 		represents an action like (terminate, allow or skip)
#
# - {c-expression} 	defines nearly any kind of c expression.
#                  	example: domain == AF_UNIX
#                  	example: domain == AF_UNIX && type == SOCK_STREAM
#				   	example: (rlim->rlim_max < 50 || rlim->rlim_max > 100) && resource == 5
#				   	example: stat->st_uid == getuid()
#
# - {permissions}  	defines a permission string consisting of "rwcx"
#				   	r = read, w = write, c = create, x = execute
#				   	if for example the paremeter flags in the open syscall
# 				   	is added to the group permission_flag, it is checked against
#				   	these flags
#				  	example: allow(r)    path dir_starts_with("/home/remo/read_only_dir")
#				   	example: allow(r)    path not dir_starts_with("/home/remo/read_only_dir")
#
# - {field}		   	defines the field against a value should be checked.
#				   	it can either be the name of the argument or the group name of an argument
#					it is also possible to access elements of a struct as it would be in c
#					example: filename
#					example: buf
#					example: rlim->rlim_max
#
# - {value_check}  	defines a check against a specific value. These can easier be transformed
#				   	into kernel checked system calls.
#				   	example: != AF_IPX
#				   	example: == AF_UNIX or just AF_UNIX
#					example: dir_starts_with("/home/remo/Desktop")
#					example: starts_with("start of a string")
#
# - {new_value}		Defines the new value an argument should get before syscall execution
#					It can either be a value like 10, AF_UNIX, ... or a String "new_string"
#					example: redirect		resource == 1 && rlim->rlim_max > 2048: rlim->rlim_max => 1024
#					example: path redirect:	dir_starts_with("/home/remo/denied") => "/home/remo/allowed"
# 					example: redirect:		filename dir_ends_with(".txt") => ".dat"
#
#
# default:								{action} 	//specifies the default action of a syscall section
#
# {action}:								{c-expression}, {c-expression}, ...
# {action}({permissions}):				{c-expression}, {c-expression}, ...
#
# {field} {action}:						{value_check}, {value_check}, ...
# {field} {action}({permissions}):		{value_check}, {value_check}, ...
#
# redirect:								{c-expression}: {field} => {new_value}, {c-expression}: {field} => {new_value}, ...
# redirect({permissions}):				{c-expression}: {field} => {new_value}, {c-expression}: {field} => {new_value}, ...
# {field} redirect:						{value_check}, {value_check}, ...
# {field} redirect({permissions}):		{value_check}, {value_check}, ...
# 
# /////////////////////////////////////////////
#
# The rule configuration logif allows also to modify and check
# strings and paths
#  - dir_starts_with("path") and 
#  - dir_ends_with("path")
# check the associated field against the specified path.
# it is important to use "dir_" for paths, because in this way
# relative paths are automatically resolved.
#
#  - starts_with("string") and 
#  - ends_with("string") i
# Have the same effect, except no path is automatically resolved
#
#  - fd_path_starts_with("path") and
#  - fd_path_ends_with("path")
# Allow to check the path of a file descriptor like dir_starts_with,...
# But it is important to know, that a file descriptor generally
# does not have a fixed path to it. If hard links,.. are used
# it is likely, that the check may fail and return false
#
# -----------------------------------------------------------------
# Version: 1.0
# -----------------------------------------------------------------
# 01.04.2018:       schwerem        Version 1.0 implemented
# -----------------------------------------------------------------
#
# TODO:
#  - Advanced error messages for invalid file formats
#  - More checks to detect file format errors
#
###################################################################

[General]
debug:					True

# Client specific rules
default_action:			trap
syscall allow:			exit, exit_group, write, read, close,
						fstat, getrlimit
syscall modify:			gettimeofday, getcwd

# Tracer specific rules
default_action_tracer:	trap
tracer allow:			ptrace, wait4, getpid, socket, connect, sendto, readlink, kill, exit, exit_group, write, read, lseek, close, fstat, lstat

[Global]
path redirect(r):		dir_starts_with("/home/remo/Schreibtisch/test/modify") => "/home/remo/Schreibtisch/test/redirected_read"
path skip:				dir_starts_with("/home/remo/Schreibtisch/test/skip")

[open]
default:				skip
path allow(r):			dir_starts_with("/home/remo/Schreibtisch/test/valid"), dir_starts_with("/home/remo/Schreibtisch/test/fd_copy_deny")
skip(c):				filename dir_starts_with("/home/remo/Schreibtisch/test/write_yes_create_no")
allow(w):				filename dir_starts_with("/home/remo/Schreibtisch/test/write_yes_create_no")
allow(r):				filename dir_starts_with("/home/remo/Schreibtisch/test/fd_copy_deny/test.txt")
redirect:				path dir_ends_with(".dat") => ".txt"

[setrlimit]
default:				terminate
redirect:				resource == RLIMIT_NPROC && limit->rlim_max > 8: limit->rlim_max => 8,
						limit->rlim_cur > limit->rlim_max: limit->rlim_cur => limit->rlim_max-1
skip:					resource == RLIMIT_CPU

[chdir]
default:				allow
redirect:				path dir_starts_with("/home/remo/Schreibtisch/test/invalid") => "/home/remo/Schreibtisch/test/valid"

[dup]:
default:				allow
fd skip:				fd_path_starts_with("/home/remo/Schreibtisch/test/fd_copy_deny/test.txt")		

[fcntl]:
default:				terminate
cmd allow:				F_GETFL
skip:					cmd == F_GETFD
