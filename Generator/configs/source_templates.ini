###################################################################
# Seccomp Toolkit by Remo Schweizer as a part of the master thesis
#                  ____ _ _  ___  _ _ _ 
#                 |_  /| | || . || | | |
#                  / / |   ||   || | | |
#                 /___||_|_||_|_||__/_/ 
#                      
# Defines source templates for the SecConfigBuilder
# It is possible to define templates for the debugging and
# the productive part, If no template is specified for the
# debugging part, a fallback to the productive version is made
#
# -----------------------------------------------------------------
# Version: 1.0
# -----------------------------------------------------------------
# 01.04.2018:       schwerem        Version 1.0 implemented
# -----------------------------------------------------------------
#
###################################################################


#------------------------------
#---- PRODUCTIVE TEMPLATES ----
#------------------------------
[Productive]
# Templates for the seccomp rule generation
seccomp_inlucde:			<stdio.h>, <stdlib.h>, <errno.h>, <sys/prctl.h>, <seccomp.h>, <linux/seccomp.h>, "sec_seccomp_bpf_generator.h"

seccomp_default_flag:		
seccomp_init:				void load{instance}SeccompRules(){
								if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
									perror("Could not start seccomp:");
									exit(1);
								}

								seccomp_ctx ctx;
								ctx = sec_seccomp_init({syscall_default_action});
								{rules}

								if (sec_seccomp_load(ctx)== -1) {
									perror("Seccomp could not be initialized. Abort Process.");
									exit(1);
								}
							}

# seccomp action modifiers
seccomp_allow:				SCMP_ACT_ALLOW
seccomp_skip:				SCMP_ACT_ERRNO({errorcode})
seccomp_terminate:			SCMP_ACT_KILL
seccomp_modify:				SCMP_ACT_TRACE(PTRACE_EXECUTE)
seccomp_redirect:			SCMP_ACT_TRACE(PTRACE_EXECUTE)
seccomp_trap:				SCMP_ACT_TRAP

# seccomp action modifiers for the tracer
seccomp_allow_tracer:		SCMP_ACT_ALLOW
seccomp_skip_tracer:		SCMP_ACT_KILL	
seccomp_terminate_tracer:	SCMP_ACT_KILL
seccomp_modify_tracer:		SCMP_ACT_ALLOW
seccomp_redirect_tracer:	SCMP_ACT_ALLOW
seccomp_trap_tracer:		SCMP_ACT_TRAP

# constructs for the rule generation
seccomp_basic_rule:			sec_seccomp_rule_add(ctx, {action}, {syscall_nr}, 0);
seccomp_argument_rule:		sec_seccomp_rule_add(ctx, {action}, {syscall_nr}, {count}, {argument});
seccomp_argument:			SCMP_A{nr}(SCMP_CMP_{comparator}, {value})


# Templates for the Emulator function generation
emulator_include:			<signal.h>, <string.h>, <fcntl.h>, <syslog.h>
rule_check_init:			struct sec_rule_result __rule_action;
							__rule_action.new_value = NULL;
							__rule_action.size = -1;
							__rule_action.action = {default_syscall_action};
rule_check_execute:			executeRuleResult(pid, __rule_action, -1, false);
rule_check_if:				if({clause}){
								{code}
								__rule_action.action = {rule_action};
							}
rule_check_elseif:			else if({clause}){
								{code}
								__rule_action.action = {rule_action};
							}
rule_multiplexer_case:		case {syscall}:
							{
								{param_load}
								{sec_function}({sec_function_params});
								{cleanup}
							}
							break;
rule_multiplexer_default:	default:
							{
								invalidateSystemcall(pid);
								if (status>>8 == (SIGTRAP | (PTRACE_EVENT_SECCOMP<<8))){
									printf("Called invalide system call [%d]. Application will be terminated.\n", syscall_n);
									kill(pid, SIGSTOP);
									exit(0);
								}
							}

rule_set_code_val:			{variable} = {new_value};
							{overwrite}
rule_set_code_string:		struct sec_rule_result new_string = changeStringValue({string});
							executeRuleResult(pid, new_string, PAR{nr}, {is_out});		

rule_permission_if:			if({clause}){
								{code}
							}
rule_permission_check_rw:	({variable} & O_ACCMODE) == {flag} 		
rule_permission_check:		{variable} & {flag}

# Templates for specific function calls
starts_with_check:			{negate_operator}stringMatchesStart({reference}, {field}, {length}, {is_dir})
ends_with_check:			{negate_operator}stringMatchesEnd({reference}, {field}, {length}, {is_dir})
fd_path_starts_with_check:	{negate_operator}fdPathMatchesStart({pid}, {reference}, {field})
fd_path_ends_with_check:	{negate_operator}fdPathMatchesEnd({pid}, {reference}, {field})

# Templates for the starts_with function which replace a value at the same time
starts_with_replace:		{
								struct sec_rule_result redirect_result = changeStringOnStartMatch({reference}, {field}, {length}, {new_string}, {is_dir});
								executeRuleResult(pid, redirect_result, PAR{nr}, {is_out});
								if (redirect_result.action == SEC_ACTION_MODIFY){
									__rule_action.action = SEC_ACTION_ALLOW;
								}
							}
ends_with_replace:			{
								struct sec_rule_result redirect_result = changeStringOnEndMatch({reference}, {field}, {length}, {new_string}, {is_dir});
								executeRuleResult(pid, redirect_result, PAR{nr}, {is_out});
								if (redirect_result.action == SEC_ACTION_MODIFY){
									__rule_action.action = SEC_ACTION_ALLOW;
								}
							}


#------------------------------
#------- DEBUG TEMPLATES ------
#------------------------------
[Debug]
seccomp_init:				void load{instance}SeccompRules(){
								if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
									perror("Could not start seccomp:");
									exit(1);
								}

								seccomp_ctx ctx;
								ctx = sec_seccomp_init({syscall_default_action});
								{rules}

								FILE *f = fopen("debug_seccomp_bpf_{instance}.txt", "w");
								sec_seccomp_export_bpf(ctx, fileno(f));
								fclose(f);

								if (sec_seccomp_load(ctx)== -1) {
									perror("Seccomp could not be initialized. Abort Process.");
									exit(1);
								}
							}

seccomp_default_flag:		| PTRACE_GENERAL_RULE

seccomp_allow:				SCMP_ACT_TRACE(PTRACE_DBG_ALLOW {default_flag})
seccomp_skip:				SCMP_ACT_TRACE(PTRACE_DBG_SKIP {default_flag})
seccomp_terminate:			SCMP_ACT_TRACE(PTRACE_DBG_TERMINATE {default_flag})
seccomp_modify:				SCMP_ACT_TRACE(PTRACE_DBG_MODIFY {default_flag})
seccomp_redirect:			SCMP_ACT_TRACE(PTRACE_DBG_MODIFY {default_flag})